#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "hold-preferred";
};

&mt {
    require-prior-idle-ms = <350>;
    flavor = "hold-preferred";
    tapping-term-ms = <250>;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 24 5 29>;
            layers = <0>;
            require-prior-idle-ms = <900>;
        };

        prtscr {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <0 24>;
        };

        alt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <11 10>;
        };

        super_backspce {
            bindings = <&kp CAPSLOCK>;
            key-positions = <21 19 20>;
        };

        control_layer {
            bindings = <&mo 2>;
            key-positions = <40 30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };

        SUPER {
            bindings = <&sk LS(LA(LC(LGUI)))>;
            key-positions = <16 15>;
        };

        cmd_backspace {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <9 10 11>;
        };

        another_super {
            bindings = <&sk LS(LA(LC(LGUI)))>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R         &kp T        &kp Y  &kp U             &kp I              &kp O    &kp P          &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D         &kp F         &kp G        &kp H  &kp J             &kp K              &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V         &kp B        &kp N  &kp M             &kp COMMA          &kp DOT  &kp FSLH       &kp LEFT_SHIFT
                                &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 SPACE  &mo 1  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;
        };

        rise_layer {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4          &kp N5                 &kp NUMBER_6    &kp N7          &kp N8        &kp N9           &kp N0         &kp EQUAL
&trans     &kp EXCL      &kp AT         &kp HASH      &kp DOLLAR            &kp PERCENT            &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp MINUS      &kp PLUS
&trans     &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none           &none           &none         &none            &kp BACKSLASH  &kp PIPE
                                        &trans        &trans                &kp UNDER              &trans          &trans          &trans
            >;
        };

        control {
            bindings = <
&none       &none          &none          &none          &none          &none   &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &kp K_NEXT    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE
&none       &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0  &none   &none           &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &kp C_BRIGHTNESS_INC
&bt BT_CLR  &none          &trans         &trans         &trans         &trans  &none           &none             &none         &none              &none            &kp C_BRIGHTNESS_DEC
                                          &none          &none          &none   &none           &none             &none
            >;
        };
    };
};
