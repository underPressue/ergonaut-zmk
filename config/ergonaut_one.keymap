#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "hold-preferred";
};

&mt {
    require-prior-idle-ms = <350>;
    flavor = "hold-preferred";
    tapping-term-ms = <250>;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        bootloader {
            bindings = <&bootloader>;
            key-positions = <0 1 10 11>;
            layers = <0>;
            require-prior-idle-ms = <900>;
        };

        prtscr {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <0 24>;
        };

        alt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <19 20>;
        };

        super_backspce {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <21 19 20>;
        };

        control_layer {
            bindings = <&mo 2>;
            key-positions = <40 30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };

        SUPER {
            bindings = <&sk LS(LA(LC(LGUI)))>;
            key-positions = <16 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R         &kp T        &kp Y  &kp U             &kp I              &kp O    &kp P          &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D         &kp F         &kp G        &kp H  &kp J             &kp K              &kp L    &kp SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V         &kp B        &kp N  &kp M             &kp COMMA          &kp DOT  &kp FSLH       &kp LEFT_SHIFT
                                &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 SPACE  &mo 1  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;
        };

        rise_layer {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN      &kp N7  &kp N8  &kp N9  &kp CARET       &kp AMPERSAND   &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_EQUAL
&trans     &kp HASH         &kp DOLLAR       &kp N4  &kp N5  &kp N6  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW       &kp MINUS              &kp PLUS
&trans     &kp PERCENT      &kp KP_NUMBER_0  &kp N1  &kp N2  &kp N3  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3          &kp BACKSLASH          &kp PIPE
                                             &trans  &trans  &trans  &kp UNDER       &trans          &trans
            >;
        };

        control {
            bindings = <
&trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans         &trans         &trans         &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE
&none       &none                 &bt BT_DISC 3         &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0  &none           &none             &none       &none              &none            &none
&bt BT_CLR  &none                 &bt BT_SEL 3          &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &none           &none             &none       &none              &none            &none
                                                        &none          &none          &none          &none           &none             &none
            >;
        };
    };
};
